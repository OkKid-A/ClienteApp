
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.cunoc.Conexion;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class RespuestasParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public RespuestasParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public RespuestasParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public RespuestasParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\003\000\002\011" +
    "\003\000\002\004\005\000\002\004\002\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\005\013\000\002\006\013\000\002\007\013\000\002" +
    "\010\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\006\002\ufffd\004\005\001\002\000\004\002" +
    "\062\001\002\000\012\005\014\010\012\011\007\012\010" +
    "\001\002\000\004\002\000\001\002\000\004\006\052\001" +
    "\002\000\004\006\042\001\002\000\006\002\ufffa\004\ufffa" +
    "\001\002\000\004\006\032\001\002\000\006\002\ufffd\004" +
    "\005\001\002\000\004\006\021\001\002\000\006\002\ufffb" +
    "\004\ufffb\001\002\000\006\002\uffff\004\uffff\001\002\000" +
    "\006\002\ufffc\004\ufffc\001\002\000\006\002\ufff9\004\ufff9" +
    "\001\002\000\004\013\022\001\002\000\004\015\023\001" +
    "\002\000\004\014\024\001\002\000\004\004\025\001\002" +
    "\000\004\007\026\001\002\000\004\005\027\001\002\000" +
    "\004\006\030\001\002\000\006\002\ufff8\004\ufff8\001\002" +
    "\000\004\002\ufffe\001\002\000\004\013\033\001\002\000" +
    "\004\015\034\001\002\000\004\014\035\001\002\000\004" +
    "\004\036\001\002\000\004\007\037\001\002\000\004\010" +
    "\040\001\002\000\004\006\041\001\002\000\006\002\ufff7" +
    "\004\ufff7\001\002\000\004\013\043\001\002\000\004\015" +
    "\044\001\002\000\004\014\045\001\002\000\004\004\046" +
    "\001\002\000\004\007\047\001\002\000\004\012\050\001" +
    "\002\000\004\006\051\001\002\000\006\002\ufff5\004\ufff5" +
    "\001\002\000\004\013\053\001\002\000\004\015\054\001" +
    "\002\000\004\014\055\001\002\000\004\004\056\001\002" +
    "\000\004\007\057\001\002\000\004\011\060\001\002\000" +
    "\004\006\061\001\002\000\006\002\ufff6\004\ufff6\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\006\002\003\004\005\001\001\000\002\001" +
    "\001\000\016\003\015\005\016\006\014\007\010\010\017" +
    "\011\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$RespuestasParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$RespuestasParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$RespuestasParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Respuesta respuesta;

    public RespuestasParser(RespuestasScanner lex){
        super(lex);
        this.respuesta = new Respuesta();
    }

    public Respuesta getRespuesta(){
        return respuesta;
    }

    public void syntax_error(Symbol cur_token) {
            System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
                        System.out.println("Linea " + cur_token.left+" Columna " + cur_token.right);
                        String posibleLex = "";
                        if (cur_token.value != null){
                            System.out.println("Lexema: "+cur_token.value);
                            posibleLex = "Lexema: "+(String) cur_token.value;
                        }
                        respuesta.addErrorSintactico("Error sintactico al encontrar el simbolo:" + symbl_name_from_id(cur_token.sym)+"\nLinea " +
                                cur_token.left+", Columna \n" + cur_token.right+posibleLex);
                        if (expected_token_ids().isEmpty()) {
                            System.out.println("ya no se esperaba ningun simbolo");
                        } else {
                        List<Integer> ids = this.expected_token_ids();
                                LinkedList<String> list = new LinkedList();
                                Iterator var3 = ids.iterator();

                                while(var3.hasNext()) {
                                    Integer expected = (Integer)var3.next();
                                    list.add(this.symbl_name_from_id(expected));
                                }
                                          respuesta.addErrorSintactico("Se esperaba uno de los tokens:" + list.toString());
                                                                        report_expected_token_ids();
                                                                    }
                    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$RespuestasParser$actions {
  private final RespuestasParser parser;

  /** Constructor */
  CUP$RespuestasParser$actions(RespuestasParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$RespuestasParser$do_action_part00000000(
    int                        CUP$RespuestasParser$act_num,
    java_cup.runtime.lr_parser CUP$RespuestasParser$parser,
    java.util.Stack            CUP$RespuestasParser$stack,
    int                        CUP$RespuestasParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$RespuestasParser$result;

      /* select the action based on the action number */
      switch (CUP$RespuestasParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= script EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-1)).value;
		RESULT = start_val;
              CUP$RespuestasParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-1)), ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$RespuestasParser$parser.done_parsing();
          return CUP$RespuestasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // script ::= mensajes 
            {
              Object RESULT =null;
		  
              CUP$RespuestasParser$result = parser.getSymbolFactory().newSymbol("script",0, ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), RESULT);
            }
          return CUP$RespuestasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // preMensajes ::= errores 
            {
              Object RESULT =null;

              CUP$RespuestasParser$result = parser.getSymbolFactory().newSymbol("preMensajes",7, ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), RESULT);
            }
          return CUP$RespuestasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mensajes ::= MENORQUE preMensajes mensajes 
            {
              Object RESULT =null;
		  
              CUP$RespuestasParser$result = parser.getSymbolFactory().newSymbol("mensajes",2, ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-2)), ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), RESULT);
            }
          return CUP$RespuestasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mensajes ::= 
            {
              Object RESULT =null;
		  
              CUP$RespuestasParser$result = parser.getSymbolFactory().newSymbol("mensajes",2, ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), RESULT);
            }
          return CUP$RespuestasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // errores ::= lexError 
            {
              Object RESULT =null;
		  
              CUP$RespuestasParser$result = parser.getSymbolFactory().newSymbol("errores",1, ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), RESULT);
            }
          return CUP$RespuestasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // errores ::= sinError 
            {
              Object RESULT =null;
		  
              CUP$RespuestasParser$result = parser.getSymbolFactory().newSymbol("errores",1, ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), RESULT);
            }
          return CUP$RespuestasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // errores ::= fileError 
            {
              Object RESULT =null;
		  
              CUP$RespuestasParser$result = parser.getSymbolFactory().newSymbol("errores",1, ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), RESULT);
            }
          return CUP$RespuestasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // errores ::= success 
            {
              Object RESULT =null;
		  
              CUP$RespuestasParser$result = parser.getSymbolFactory().newSymbol("errores",1, ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), RESULT);
            }
          return CUP$RespuestasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lexError ::= LEXICO MAYORQUE PAROP STRING PARCLO MENORQUE DIAGONAL LEXICO MAYORQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-5)).value;
		 respuesta.addErrorlexico(s); 
              CUP$RespuestasParser$result = parser.getSymbolFactory().newSymbol("lexError",3, ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-8)), ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), RESULT);
            }
          return CUP$RespuestasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sinError ::= SINTACTICO MAYORQUE PAROP STRING PARCLO MENORQUE DIAGONAL SINTACTICO MAYORQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-5)).value;
		
  respuesta.addErrorSintactico(s); 
              CUP$RespuestasParser$result = parser.getSymbolFactory().newSymbol("sinError",4, ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-8)), ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), RESULT);
            }
          return CUP$RespuestasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fileError ::= ARCHIVO MAYORQUE PAROP STRING PARCLO MENORQUE DIAGONAL ARCHIVO MAYORQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-5)).value;
		
  respuesta.addErrorArchivo(s); 
              CUP$RespuestasParser$result = parser.getSymbolFactory().newSymbol("fileError",5, ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-8)), ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), RESULT);
            }
          return CUP$RespuestasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // success ::= SUCCESS MAYORQUE PAROP STRING PARCLO MENORQUE DIAGONAL SUCCESS MAYORQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-5)).value;
		
  respuesta.addExito(s); 
              CUP$RespuestasParser$result = parser.getSymbolFactory().newSymbol("success",6, ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.elementAt(CUP$RespuestasParser$top-8)), ((java_cup.runtime.Symbol)CUP$RespuestasParser$stack.peek()), RESULT);
            }
          return CUP$RespuestasParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$RespuestasParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$RespuestasParser$do_action(
    int                        CUP$RespuestasParser$act_num,
    java_cup.runtime.lr_parser CUP$RespuestasParser$parser,
    java.util.Stack            CUP$RespuestasParser$stack,
    int                        CUP$RespuestasParser$top)
    throws java.lang.Exception
    {
              return CUP$RespuestasParser$do_action_part00000000(
                               CUP$RespuestasParser$act_num,
                               CUP$RespuestasParser$parser,
                               CUP$RespuestasParser$stack,
                               CUP$RespuestasParser$top);
    }
}

}
